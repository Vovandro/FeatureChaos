// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: FeatureChaos.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const _ = grpc.SupportPackageIsVersion9

const (
	FeatureService_Subscribe_FullMethodName = "/FeatureChaos.FeatureService/Subscribe"
	FeatureService_Stats_FullMethodName     = "/FeatureChaos.FeatureService/Stats"
)

type FeatureServiceClient interface {
	Subscribe(ctx context.Context, in *GetAllFeatureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFeatureResponse], error)
	Stats(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendStatsRequest, emptypb.Empty], error)
}

type featureServiceClient struct{ cc grpc.ClientConnInterface }

func NewFeatureServiceClient(cc grpc.ClientConnInterface) FeatureServiceClient {
	return &featureServiceClient{cc}
}

func (c *featureServiceClient) Subscribe(ctx context.Context, in *GetAllFeatureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFeatureResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeatureService_ServiceDesc.Streams[0], FeatureService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAllFeatureRequest, GetFeatureResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureService_SubscribeClient = grpc.ServerStreamingClient[GetFeatureResponse]

func (c *featureServiceClient) Stats(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendStatsRequest, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeatureService_ServiceDesc.Streams[1], FeatureService_Stats_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendStatsRequest, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

type FeatureService_StatsClient = grpc.ClientStreamingClient[SendStatsRequest, emptypb.Empty]

type FeatureServiceServer interface {
	Subscribe(*GetAllFeatureRequest, grpc.ServerStreamingServer[GetFeatureResponse]) error
	Stats(grpc.ClientStreamingServer[SendStatsRequest, emptypb.Empty]) error
}

type UnimplementedFeatureServiceServer struct{}

func (UnimplementedFeatureServiceServer) Subscribe(*GetAllFeatureRequest, grpc.ServerStreamingServer[GetFeatureResponse]) error {
	return grpc.Errorf(grpc.Code(grpc.ErrServerStopped), "method Subscribe not implemented")
}
func (UnimplementedFeatureServiceServer) Stats(grpc.ClientStreamingServer[SendStatsRequest, emptypb.Empty]) error {
	return grpc.Errorf(grpc.Code(grpc.ErrServerStopped), "method Stats not implemented")
}

func RegisterFeatureServiceServer(s grpc.ServiceRegistrar, srv FeatureServiceServer) {
	s.RegisterService(&FeatureService_ServiceDesc, srv)
}

func _FeatureService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllFeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServiceServer).Subscribe(m, &grpc.GenericServerStream[GetAllFeatureRequest, GetFeatureResponse]{ServerStream: stream})
}

func _FeatureService_Stats_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FeatureServiceServer).Stats(&grpc.GenericServerStream[SendStatsRequest, emptypb.Empty]{ServerStream: stream})
}

var FeatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FeatureChaos.FeatureService",
	HandlerType: (*FeatureServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{StreamName: "Subscribe", Handler: _FeatureService_Subscribe_Handler, ServerStreams: true},
		{StreamName: "Stats", Handler: _FeatureService_Stats_Handler, ClientStreams: true},
	},
	Metadata: "FeatureChaos.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: FeatureChaos.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeatureService_Subscribe_FullMethodName = "/FeatureChaos.FeatureService/Subscribe"
	FeatureService_Stats_FullMethodName     = "/FeatureChaos.FeatureService/Stats"
)

// FeatureServiceClient is the client API for FeatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureServiceClient interface {
	Subscribe(ctx context.Context, in *GetAllFeatureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFeatureResponse], error)
	Stats(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendStatsRequest, emptypb.Empty], error)
}

type featureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureServiceClient(cc grpc.ClientConnInterface) FeatureServiceClient {
	return &featureServiceClient{cc}
}

func (c *featureServiceClient) Subscribe(ctx context.Context, in *GetAllFeatureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFeatureResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeatureService_ServiceDesc.Streams[0], FeatureService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAllFeatureRequest, GetFeatureResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FeatureService_SubscribeClient = grpc.ServerStreamingClient[GetFeatureResponse]

func (c *featureServiceClient) Stats(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendStatsRequest, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeatureService_ServiceDesc.Streams[1], FeatureService_Stats_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendStatsRequest, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FeatureService_StatsClient = grpc.ClientStreamingClient[SendStatsRequest, emptypb.Empty]

// FeatureServiceServer is the server API for FeatureService service.
// All implementations should embed UnimplementedFeatureServiceServer
// for forward compatibility.
type FeatureServiceServer interface {
	Subscribe(*GetAllFeatureRequest, grpc.ServerStreamingServer[GetFeatureResponse]) error
	Stats(grpc.ClientStreamingServer[SendStatsRequest, emptypb.Empty]) error
}

// UnimplementedFeatureServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeatureServiceServer struct{}

func (UnimplementedFeatureServiceServer) Subscribe(*GetAllFeatureRequest, grpc.ServerStreamingServer[GetFeatureResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedFeatureServiceServer) Stats(grpc.ClientStreamingServer[SendStatsRequest, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedFeatureServiceServer) testEmbeddedByValue() {}

// UnsafeFeatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureServiceServer will
// result in compilation errors.
type UnsafeFeatureServiceServer interface {
	mustEmbedUnimplementedFeatureServiceServer()
}

func RegisterFeatureServiceServer(s grpc.ServiceRegistrar, srv FeatureServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeatureServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeatureService_ServiceDesc, srv)
}

func _FeatureService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllFeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureServiceServer).Subscribe(m, &grpc.GenericServerStream[GetAllFeatureRequest, GetFeatureResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FeatureService_SubscribeServer = grpc.ServerStreamingServer[GetFeatureResponse]

func _FeatureService_Stats_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FeatureServiceServer).Stats(&grpc.GenericServerStream[SendStatsRequest, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FeatureService_StatsServer = grpc.ClientStreamingServer[SendStatsRequest, emptypb.Empty]

// FeatureService_ServiceDesc is the grpc.ServiceDesc for FeatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FeatureChaos.FeatureService",
	HandlerType: (*FeatureServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _FeatureService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stats",
			Handler:       _FeatureService_Stats_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "FeatureChaos.proto",
}
